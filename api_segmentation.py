from fastapi import FastAPI, UploadFile, File
from tensorflow.keras.models import load_model
import numpy as np
from PIL import Image
import io
from pathlib import Path
from tensorflow import keras
import os
import gdown



# ID du fichier Google Drive (remplacez par votre propre ID)
FILE_ID = "12vreJSXI9P0lpwF0gWnoKuG0T6RJnVFK"
MODEL_DIR = "model"
MODEL_PATH = os.path.join(MODEL_DIR, "unet_model.h5")

def download_model_from_drive():
    """T√©l√©charge le mod√®le depuis Google Drive si non pr√©sent localement."""
    # üîπ Cr√©er le dossier `model/` s'il n'existe pas
    if not os.path.exists(MODEL_DIR):
        os.makedirs(MODEL_DIR)
        print(f"üìÅ Dossier cr√©√© : {MODEL_DIR}")

    if not os.path.exists(MODEL_PATH):
        print("üîÑ T√©l√©chargement du mod√®le depuis Google Drive...")
        gdown.download(f"https://drive.google.com/uc?id={FILE_ID}", MODEL_PATH, quiet=False)
        print("‚úÖ Mod√®le t√©l√©charg√© avec succ√®s !")
    else:
        print("‚úÖ Mod√®le d√©j√† pr√©sent localement.")

# Ex√©cuter le t√©l√©chargement au d√©marrage
download_model_from_drive()

# Charger le mod√®le U-Net 
from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent
MODEL_PATH = BASE_DIR / "model" / "unet_model.h5"
model = load_model(MODEL_PATH)


app = FastAPI()

# Charger le mod√®le de segmentation
model = keras.models.load_model(MODEL_PATH, compile=False)
print("‚úÖ Mod√®le charg√© avec succ√®s !")
def preprocess_image(image_bytes):
    """Pr√©traitement de l'image avant pr√©diction"""
    image = Image.open(io.BytesIO(image_bytes)).resize((256, 256))
    image = np.array(image) / 255.0  # Normalisation
    image = np.expand_dims(image, axis=0)  # Ajouter une dimension batch
    return image

@app.post("/predict/")
async def predict(file: UploadFile = File(...)):
    """Endpoint de pr√©diction"""
    image = await file.read()
    processed_image = preprocess_image(image)
    prediction = model.predict(processed_image)
    mask = np.argmax(prediction, axis=-1)[0]  # Obtenir les classes

    return {"mask": mask.tolist()}
